
function compute_steady_state(grids::Dict{Symbol, Array{{FLoat64}},
                              params::Dict{Symbol, Float64},
                              approx_params::Dict{Symbol, Float64},
                              init_params::Dict{Symbol, Float64})  ...
    return vars_SS ## vars_SS::OrderedDict{Symbol, Any}
end


function get_residuals(vars_SS::OrderedDict{Symbol, Any},
                       grids::Dict{Symbol, Array{Float64}},
                       params::Dict{Symbol, Float64},
                       approx_params::Dict{Symbol, Float64})
...
    return v_residual ## v_residual::OrderedDict{Symbol, Any}
end


function equilibrium_conditions(v_residual::OrderedDict{Symbol, Any}(),
                                vars_SS::OrderedDict{Symbol, Any},
                                grids::Dict{Symbol, Array{Float64}},
                                params::Dict{Symbol, Float64},
                                approx_params::Dict{Symbol, Float64})
...
    return \Gamma0, \Gamma1, \Pi, \Psi, C ## \Gamma0::Matrix, \Gamma1::Matrix, \Pi::Matrix, \Psi::Matrix, C::Matrix
end


function solve(grids::Dict{Symbol, Array{{FLoat64}},
               params::Dict{Symbol, Float64},
               approx_params::Dict{Symbol, Float64},
               I::Int64, J::Int64)
...
    return T, C, R, vars_SS, redundant_states_inv ##T::Matrix{Float64}, C::Matrix{Float64}, R::Matrix{Float64}, vars_SS::OrderedDict{Symbol, Any}, redundant_states_inv::Matrix
end


What is the purpose of making a new grid type rather than keeping it as a Dict?

